from langchain_core.prompts import ChatPromptTemplate
from langchain_core.output_parsers import StrOutputParser
from langchain_community.llms import Ollama
import streamlit as st

prompt = ChatPromptTemplate.from_messages(
    [
        ("system", "You are a financial advisor who understands the user's financial condition and suggests investment options accordingly to reach their long-term and short-term financial goals. Consider the choice of time duration and goal."),
        ("user", "Question: [Age: {age}, Saving: {saving}, Goal: {goal}, Term: {term}]")
    ]
)

st.title('AI Financial Advisor')
input_age = st.number_input("Enter your age", 0, 100)
input_saving = st.number_input("Enter your saving amount", 1000, step=1000)
input_goal = st.text_input("Enter your goal (family/personal)")
input_term = st.selectbox("Enter the time duration", ('Short-Term', 'Mid-Term', 'Long-Term'))

llm = Ollama(model="llama3.2")
output_parser = StrOutputParser()   
chain = prompt | llm | output_parser

if input_age and input_goal and input_saving and input_term:
    st.write(chain.invoke({
        'age': input_age,
        'saving': input_saving,
        'goal': input_goal,
        'term': input_term
    }))


code 2 



# from langchain_core.prompts import ChatPromptTemplate
# from langchain_core.output_parsers import StrOutputParser
# from langchain_community.llms import Ollama
# import streamlit as st
# import math

# # Function to calculate estimated investment growth for each option
# def calculate_investment_growth(monthly_income, time_horizon_years, risk_level):
#     # Set expected return rates based on risk level
#     if risk_level == 'Low':
#         return_rate = 0.04  # 4% annual return
#     elif risk_level == 'Medium':
#         return_rate = 0.06  # 6% annual return
#     else:  # High risk
#         return_rate = 0.08  # 8% annual return
    
#     # Calculate future value using the future value of an annuity formula
#     n = 12  # Compounded monthly
#     future_value = monthly_income * (((1 + return_rate / n) ** (n * time_horizon_years) - 1) / (return_rate / n))
    
#     return round(future_value, 2)

# st.title('AI Financial Advisor')
# input_age = st.number_input("Enter your age", 0, 100)
# input_employment_status = st.selectbox("Choose your Employment Status", ['Select From Below', 'Employed', 'Unemployed', 'Freelancer', 'Student'])

# if input_employment_status in ['Employed', 'Freelancer']:
#     input_income = st.number_input("Enter your monthly income")
# elif input_employment_status == 'Student':
#     input_income = 0  # Default income for students is set to 0


# input_approach = st.selectbox("Select Investment / Debt Clearance", ('Investment', 'Debt Clearance'))

# if input_approach == 'Investment':
#     input_primarygoal = st.selectbox("What is your primary investment goal", ('Wealth Accumulation', 'Retirement Planning', 'Education Funding'))
#     input_time_horizon = st.selectbox("Select your Investment Time Horizon", ('1-3 years', '3-10 years', '10+ years'))
#     input_risk_level = st.selectbox("What is your risk tolerance?", ('Low', 'Medium', 'High'))
#     input_target_amount = st.number_input("Enter your target savings amount")

# elif input_approach == 'Debt Clearance':
#     input_debttype = st.selectbox("What type of debt do you have?", ('Credit Card', 'Student Loan', 'Mortgage'))
#     input_debtbalance = st.number_input('Enter the outstanding balance of the debt:')
#     input_debtpay = st.number_input('What is the monthly payment for the debt')
#     input_debtstrat = st.selectbox("Choose a debt repayment strategy", ('Debt Avalanche-Prioritize debts with the highest interest rate'
#                                                                         ,'Debt Snowball-Focus on the smallest debt first, regardless of interest rate'
#                                                                         , 'Debt Consolidation-Combine multiple debts into one with a lower interest rate'
#                                                                         ,'Debt Snowflake-Make small, extra payments whenever you have additional funds'))
#     input_dependant = st.text_input("Do you have any dependant or responsibilities")


# prompt = ChatPromptTemplate.from_messages(
#     [
#         ("system", "You are a financial advisor who provides tailored investment suggestions based on the user's input, including their target savings amount, term duration, and risk tolerance."
#                    " Suggest different investment options based on these factors, and calculate the estimated future value of each option."
#                    " Provide output in pointers with the expected results for each investment option after the specified time period."),
#         ("user", "Question:[Age:{age}, Employment Status:{employment_status}, Monthly Income:{income}, Goal:{goal}, Primary Goal:{primary_goal},"
#          " Time Horizon:{time_horizon}, Risk Level:{risk_level}, Target Amount:{target_amount}]")
#     ]
# )

# # Initialize the Ollama model
# llm = Ollama(model="llama3.2")
# output_parser = StrOutputParser()

# chain = prompt | llm | output_parser

# clicked = st.button('Get Response')


# if input_approach == 'Investment' and clicked:
#     # Calculate the projected outcomes for different investment risk levels
#     time_horizon_years = 3 if input_time_horizon == '1-3 years' else 10 if input_time_horizon == '3-10 years' else 15
#     low_risk_growth = calculate_investment_growth(input_income, time_horizon_years, 'Low')
#     medium_risk_growth = calculate_investment_growth(input_income, time_horizon_years, 'Medium')
#     high_risk_growth = calculate_investment_growth(input_income, time_horizon_years, 'High')


#     # Invoke the AI model with the user input
#     response = chain.invoke({
#         'age': input_age,
#         'employment_status': input_employment_status,
#         'income': input_income,
#         'goal': 'Investment',
#         'primary_goal': input_primarygoal,
#         'time_horizon': input_time_horizon,
#         'risk_level': input_risk_level,
#         'target_amount': input_target_amount
#     })

#     # Display AI advice and calculated outcomes
#     st.write(response)
#     st.write(f"### Projected Growth for Different Risk Levels over {time_horizon_years} Years")
#     st.write(f"- **Low Risk (4% Return)**: ₹{low_risk_growth}")
#     st.write(f"- **Medium Risk (6% Return)**: ₹{medium_risk_growth}")
#     st.write(f"- **High Risk (8% Return)**: ₹{high_risk_growth}")

# elif input_approach == 'Debt Clearance' and clicked:
#     response = chain.invoke({
#         'age': input_age,
#         'employment_status': input_employment_status,
#         'income': input_income,
#         'goal': 'Debt Clearance',
#         'debt_type': input_debttype,
#         'debt_balance': input_debtbalance,
#         'monthly_payment': input_debtpay,
#         'dependants': input_dependant
#     })

#     st.write(response)